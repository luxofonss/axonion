[
  {
    "package": "com.example.demo",
    "class_name": "DemoBackendApplication",
    "full_class_name": "com.example.demo.DemoBackendApplication",
    "file_path": "f:\\01_projects\\axonion\\data\\demo-java\\src\\main\\java\\com\\example\\demo\\DemoBackendApplication.java",
    "content": "@SpringBootApplication\npublic class DemoBackendApplication {\n\n    public static void main(String[] args) {\n        SpringApplication.run(DemoBackendApplication.class, args);\n    }\n\n}",
    "ast_hash": "46a13018b7f8c762c25458a9e99f6714",
    "implements": [],
    "methods": [
      {
        "name": "com.example.demo.DemoBackendApplication.main(String[] args)",
        "body": "public static void main(String[] args) {\n        SpringApplication.run(DemoBackendApplication.class, args);\n    }",
        "ast_hash": "10573668856ecefff11b28f1f8b62e97",
        "method_calls": [],
        "used_types": [],
        "field_access": [],
        "inheritance_info": [],
        "endpoint": [],
        "type": "regular",
        "project_id": "2",
        "branch": "main"
      }
    ],
    "parent_class": [
      null
    ],
    "project_id": "2",
    "branch": "main",
    "is_nested": false,
    "type": "configuration"
  },
  {
    "package": "com.example.demo.config",
    "class_name": "DataInitializer",
    "full_class_name": "com.example.demo.config.DataInitializer",
    "file_path": "f:\\01_projects\\axonion\\data\\demo-java\\src\\main\\java\\com\\example\\demo\\config\\DataInitializer.java",
    "content": "@Component\npublic class DataInitializer implements CommandLineRunner {\n    \n    @Autowired\n    private UserRepository userRepository;\n    \n    @Override\n    public void run(String... args) throws Exception {\n        \n        if (!userRepository.existsByUsername(\"testuser\")) {\n            User user = new User(\"testuser\", \"test@example.com\", \"password123\");\n            userRepository.save(user);\n            System.out.println(\"Default user created: testuser\");\n        }\n    }\n}",
    "ast_hash": "a9ff2a27f35162db9f39393c8c18a723",
    "implements": [],
    "methods": [
      {
        "name": "com.example.demo.config.DataInitializer.run(String... args)",
        "body": "@Override\n    public void run(String... args) throws Exception {\n        \n        if (!userRepository.existsByUsername(\"testuser\")) {\n            User user = new User(\"testuser\", \"test@example.com\", \"password123\");\n            userRepository.save(user);\n            System.out.println(\"Default user created: testuser\");\n        }\n    }",
        "ast_hash": "139fa61fa738e9b25243e821fc28334c",
        "method_calls": [
          {
            "name": "com.example.demo.repository.UserRepository.existsByUsername(String username)",
            "params": []
          }
        ],
        "used_types": [
          "com.example.demo.entity.User"
        ],
        "field_access": [
          "PrintStream out"
        ],
        "inheritance_info": [],
        "endpoint": [],
        "type": "regular",
        "project_id": "2",
        "branch": "main"
      }
    ],
    "parent_class": [
      null
    ],
    "project_id": "2",
    "branch": "main",
    "is_nested": false,
    "type": "regular"
  },
  {
    "package": "com.example.demo.controller",
    "class_name": "QuestionController",
    "full_class_name": "com.example.demo.controller.QuestionController",
    "file_path": "f:\\01_projects\\axonion\\data\\demo-java\\src\\main\\java\\com\\example\\demo\\controller\\QuestionController.java",
    "content": "@RestController\n@RequestMapping(\"/api/questions\")\n@CrossOrigin(origins = \"*\")\npublic class QuestionController {\n    \n    @Autowired\n    private QuestionService questionService;\n    \n    @PostMapping\n    public ResponseEntity<?> createQuestion(\n            @Valid @RequestBody CreateQuestionRequest request,\n            @RequestHeader(value = \"User-Id\", defaultValue = \"1\") Long userId,\n            BindingResult bindingResult) {\n        \n        try {\n            \n            if (bindingResult.hasErrors()) {\n                String errorMessage = bindingResult.getFieldErrors().stream()\n                    .map(error -> error.getField() + \": \" + error.getDefaultMessage())\n                    .collect(Collectors.joining(\", \"));\n                return ResponseEntity.badRequest()\n                    .body(new ErrorResponse(errorMessage, HttpStatus.BAD_REQUEST.value()));\n            }\n            \n            QuestionResponse response = questionService.createQuestion(request, userId);\n            return ResponseEntity.status(HttpStatus.CREATED).body(response);\n            \n        } catch (IllegalArgumentException e) {\n            return ResponseEntity.badRequest()\n                .body(new ErrorResponse(e.getMessage(), HttpStatus.BAD_REQUEST.value()));\n        } catch (RuntimeException e) {\n            if (e.getMessage().contains(\"not found\") || e.getMessage().contains(\"access denied\")) {\n                return ResponseEntity.status(HttpStatus.UNAUTHORIZED)\n                    .body(new ErrorResponse(e.getMessage(), HttpStatus.UNAUTHORIZED.value()));\n            }\n            return ResponseEntity.status(HttpStatus.INTERNAL_SERVER_ERROR)\n                .body(new ErrorResponse(\"Internal server error\", HttpStatus.INTERNAL_SERVER_ERROR.value()));\n        }\n    }\n    \n    @GetMapping\n    public ResponseEntity<?> getUserQuestions(\n            @RequestHeader(value = \"User-Id\", defaultValue = \"1\") Long userId) {\n        \n        try {\n            List<QuestionResponse> questions = questionService.getUserQuestions(userId);\n            return ResponseEntity.ok(questions);\n            \n        } catch (RuntimeException e) {\n            if (e.getMessage().contains(\"not found\")) {\n                return ResponseEntity.status(HttpStatus.UNAUTHORIZED)\n                    .body(new ErrorResponse(e.getMessage(), HttpStatus.UNAUTHORIZED.value()));\n            }\n            return ResponseEntity.status(HttpStatus.INTERNAL_SERVER_ERROR)\n                .body(new ErrorResponse(\"Internal server error\", HttpStatus.INTERNAL_SERVER_ERROR.value()));\n        }\n    }\n    \n    @GetMapping(\"/{questionId}\")\n    public ResponseEntity<?> getQuestionById(\n            @PathVariable Long questionId,\n            @RequestHeader(value = \"User-Id\", defaultValue = \"1\") Long userId) {\n        \n        try {\n            QuestionResponse question = questionService.getQuestionById(questionId, userId);\n            return ResponseEntity.ok(question);\n            \n        } catch (RuntimeException e) {\n            if (e.getMessage().contains(\"not found\") || e.getMessage().contains(\"access denied\")) {\n                return ResponseEntity.status(HttpStatus.UNAUTHORIZED)\n                    .body(new ErrorResponse(e.getMessage(), HttpStatus.UNAUTHORIZED.value()));\n            }\n            return ResponseEntity.status(HttpStatus.INTERNAL_SERVER_ERROR)\n                .body(new ErrorResponse(\"Internal server error\", HttpStatus.INTERNAL_SERVER_ERROR.value()));\n        }\n    }\n}",
    "ast_hash": "d21b58b7d23c4cc0be2b0a6ff3d2c0e6",
    "implements": [],
    "methods": [
      {
        "name": "com.example.demo.controller.QuestionController.createQuestion(\n            @Valid @RequestBody CreateQuestionRequest request,\n            @RequestHeader(value = \"User-Id\", defaultValue = \"1\") Long userId,\n            BindingResult bindingResult)",
        "body": "@PostMapping\n    public ResponseEntity<?> createQuestion(\n            @Valid @RequestBody CreateQuestionRequest request,\n            @RequestHeader(value = \"User-Id\", defaultValue = \"1\") Long userId,\n            BindingResult bindingResult) {\n        \n        try {\n            \n            if (bindingResult.hasErrors()) {\n                String errorMessage = bindingResult.getFieldErrors().stream()\n                    .map(error -> error.getField() + \": \" + error.getDefaultMessage())\n                    .collect(Collectors.joining(\", \"));\n                return ResponseEntity.badRequest()\n                    .body(new ErrorResponse(errorMessage, HttpStatus.BAD_REQUEST.value()));\n            }\n            \n            QuestionResponse response = questionService.createQuestion(request, userId);\n            return ResponseEntity.status(HttpStatus.CREATED).body(response);\n            \n        } catch (IllegalArgumentException e) {\n            return ResponseEntity.badRequest()\n                .body(new ErrorResponse(e.getMessage(), HttpStatus.BAD_REQUEST.value()));\n        } catch (RuntimeException e) {\n            if (e.getMessage().contains(\"not found\") || e.getMessage().contains(\"access denied\")) {\n                return ResponseEntity.status(HttpStatus.UNAUTHORIZED)\n                    .body(new ErrorResponse(e.getMessage(), HttpStatus.UNAUTHORIZED.value()));\n            }\n            return ResponseEntity.status(HttpStatus.INTERNAL_SERVER_ERROR)\n                .body(new ErrorResponse(\"Internal server error\", HttpStatus.INTERNAL_SERVER_ERROR.value()));\n        }\n    }",
        "ast_hash": "fc336e5f4a66d6f239c5ff21577f894d",
        "method_calls": [
          {
            "name": "com.example.demo.service.QuestionService.createQuestion(CreateQuestionRequest request, Long userId)",
            "params": []
          }
        ],
        "used_types": [
          "com.example.demo.dto.CreateQuestionRequest",
          "com.example.demo.dto.QuestionResponse"
        ],
        "field_access": [
          "INTERNAL_SERVER_ERROR",
          "BAD_REQUEST",
          "UNAUTHORIZED",
          "CREATED"
        ],
        "inheritance_info": [],
        "endpoint": [
          {
            "type": "POST",
            "path": "/api/questions",
            "produces": "",
            "consumes": ""
          }
        ],
        "type": "rest_endpoint",
        "project_id": "2",
        "branch": "main"
      },
      {
        "name": "com.example.demo.controller.QuestionController.getUserQuestions(\n            @RequestHeader(value = \"User-Id\", defaultValue = \"1\") Long userId)",
        "body": "@GetMapping\n    public ResponseEntity<?> getUserQuestions(\n            @RequestHeader(value = \"User-Id\", defaultValue = \"1\") Long userId) {\n        \n        try {\n            List<QuestionResponse> questions = questionService.getUserQuestions(userId);\n            return ResponseEntity.ok(questions);\n            \n        } catch (RuntimeException e) {\n            if (e.getMessage().contains(\"not found\")) {\n                return ResponseEntity.status(HttpStatus.UNAUTHORIZED)\n                    .body(new ErrorResponse(e.getMessage(), HttpStatus.UNAUTHORIZED.value()));\n            }\n            return ResponseEntity.status(HttpStatus.INTERNAL_SERVER_ERROR)\n                .body(new ErrorResponse(\"Internal server error\", HttpStatus.INTERNAL_SERVER_ERROR.value()));\n        }\n    }",
        "ast_hash": "093ead8152de9e820bb86213025a1ac9",
        "method_calls": [
          {
            "name": "com.example.demo.service.QuestionService.getUserQuestions(Long userId)",
            "params": []
          }
        ],
        "used_types": [
          "com.example.demo.dto.QuestionResponse"
        ],
        "field_access": [
          "INTERNAL_SERVER_ERROR",
          "UNAUTHORIZED"
        ],
        "inheritance_info": [],
        "endpoint": [
          {
            "type": "GET",
            "path": "/api/questions",
            "produces": "",
            "consumes": ""
          }
        ],
        "type": "rest_endpoint",
        "project_id": "2",
        "branch": "main"
      },
      {
        "name": "com.example.demo.controller.QuestionController.getQuestionById(\n            @PathVariable Long questionId,\n            @RequestHeader(value = \"User-Id\", defaultValue = \"1\") Long userId)",
        "body": "@GetMapping(\"/{questionId}\")\n    public ResponseEntity<?> getQuestionById(\n            @PathVariable Long questionId,\n            @RequestHeader(value = \"User-Id\", defaultValue = \"1\") Long userId) {\n        \n        try {\n            QuestionResponse question = questionService.getQuestionById(questionId, userId);\n            return ResponseEntity.ok(question);\n            \n        } catch (RuntimeException e) {\n            if (e.getMessage().contains(\"not found\") || e.getMessage().contains(\"access denied\")) {\n                return ResponseEntity.status(HttpStatus.UNAUTHORIZED)\n                    .body(new ErrorResponse(e.getMessage(), HttpStatus.UNAUTHORIZED.value()));\n            }\n            return ResponseEntity.status(HttpStatus.INTERNAL_SERVER_ERROR)\n                .body(new ErrorResponse(\"Internal server error\", HttpStatus.INTERNAL_SERVER_ERROR.value()));\n        }\n    }",
        "ast_hash": "0caa7ff43901496dbdd628cd80534a8e",
        "method_calls": [
          {
            "name": "com.example.demo.service.QuestionService.getQuestionById(Long questionId, Long userId)",
            "params": []
          }
        ],
        "used_types": [
          "com.example.demo.dto.QuestionResponse"
        ],
        "field_access": [
          "INTERNAL_SERVER_ERROR",
          "UNAUTHORIZED"
        ],
        "inheritance_info": [],
        "endpoint": [
          {
            "type": "GET",
            "path": "/api/questions/{questionId}",
            "produces": "",
            "consumes": ""
          }
        ],
        "type": "rest_endpoint",
        "project_id": "2",
        "branch": "main"
      }
    ],
    "parent_class": [
      null
    ],
    "project_id": "2",
    "branch": "main",
    "is_nested": false,
    "type": "regular"
  },
  {
    "package": "com.example.demo.dto",
    "class_name": "CreateQuestionRequest",
    "full_class_name": "com.example.demo.dto.CreateQuestionRequest",
    "file_path": "f:\\01_projects\\axonion\\data\\demo-java\\src\\main\\java\\com\\example\\demo\\dto\\CreateQuestionRequest.java",
    "content": "@Data\n@NoArgsConstructor\n@AllArgsConstructor\npublic class CreateQuestionRequest {\n    \n    @NotBlank(message = \"Question text is required\")\n    private String questionText;\n    \n    @NotBlank(message = \"Question type is required\")\n    @Pattern(regexp = \"multiple_choice|pronunciation|fill_in_the_blank\", \n             message = \"Question type must be one of: multiple_choice, pronunciation, fill_in_the_blank\")\n    private String questionType;\n    \n    @Valid\n    private List<QuestionOptionDto> options;\n    \n    private String correctAnswer;\n    \n    private String explanation;\n    \n    private List<String> tags;\n    \n    @Pattern(regexp = \"easy|medium|hard\", \n             message = \"Difficulty must be one of: easy, medium, hard\")\n    private String difficulty;\n    \n    private Long quizId;\n}",
    "ast_hash": "f039264500950e96e8f70c560a50d54c",
    "implements": [],
    "methods": [],
    "parent_class": [
      null
    ],
    "project_id": "2",
    "branch": "main",
    "is_nested": false,
    "type": "regular"
  },
  {
    "package": "com.example.demo.dto",
    "class_name": "ErrorResponse",
    "full_class_name": "com.example.demo.dto.ErrorResponse",
    "file_path": "f:\\01_projects\\axonion\\data\\demo-java\\src\\main\\java\\com\\example\\demo\\dto\\ErrorResponse.java",
    "content": "@Data\n@NoArgsConstructor\n@AllArgsConstructor\npublic class ErrorResponse {\n    \n    private String message;\n    private int status;\n    private LocalDateTime timestamp;\n    \n    \n    public ErrorResponse(String message, int status) {\n        this.message = message;\n        this.status = status;\n        this.timestamp = LocalDateTime.now();\n    }\n}",
    "ast_hash": "ac71240eb610b889942b6b362626c711",
    "implements": [],
    "methods": [],
    "parent_class": [
      null
    ],
    "project_id": "2",
    "branch": "main",
    "is_nested": false,
    "type": "regular"
  },
  {
    "package": "com.example.demo.dto",
    "class_name": "QuestionOptionDto",
    "full_class_name": "com.example.demo.dto.QuestionOptionDto",
    "file_path": "f:\\01_projects\\axonion\\data\\demo-java\\src\\main\\java\\com\\example\\demo\\dto\\QuestionOptionDto.java",
    "content": "@Data\n@NoArgsConstructor\n@AllArgsConstructor\npublic class QuestionOptionDto {\n    \n    @NotBlank(message = \"Option text is required\")\n    private String optionText;\n    \n    @NotNull(message = \"Is correct flag is required\")\n    private Boolean isCorrect;\n}",
    "ast_hash": "49939d8fca13a464fd1db313e52d602c",
    "implements": [],
    "methods": [],
    "parent_class": [
      null
    ],
    "project_id": "2",
    "branch": "main",
    "is_nested": false,
    "type": "regular"
  },
  {
    "package": "com.example.demo.dto",
    "class_name": "QuestionResponse",
    "full_class_name": "com.example.demo.dto.QuestionResponse",
    "file_path": "f:\\01_projects\\axonion\\data\\demo-java\\src\\main\\java\\com\\example\\demo\\dto\\QuestionResponse.java",
    "content": "@Data\n@NoArgsConstructor\n@AllArgsConstructor\npublic class QuestionResponse {\n    \n    private String questionId;\n    private String questionText;\n    private String questionType;\n    private List<QuestionOptionDto> options;\n    private String correctAnswer;\n    private String explanation;\n    private List<String> tags;\n    private String difficulty;\n    private LocalDateTime createdAt;\n}",
    "ast_hash": "e41c043351346e2fe81eea36bdc21d7d",
    "implements": [],
    "methods": [],
    "parent_class": [
      null
    ],
    "project_id": "2",
    "branch": "main",
    "is_nested": false,
    "type": "regular"
  },
  {
    "package": "com.example.demo.entity",
    "class_name": "Question",
    "full_class_name": "com.example.demo.entity.Question",
    "file_path": "f:\\01_projects\\axonion\\data\\demo-java\\src\\main\\java\\com\\example\\demo\\entity\\Question.java",
    "content": "@Entity\n@Table(name = \"questions\")\n@Data\n@NoArgsConstructor\n@AllArgsConstructor\npublic class Question {\n    \n    @Id\n    @GeneratedValue(strategy = GenerationType.IDENTITY)\n    private Long id;\n    \n    @Column(nullable = false, columnDefinition = \"TEXT\")\n    private String questionText;\n    \n    @Enumerated(EnumType.STRING)\n    @Column(nullable = false)\n    private QuestionType questionType;\n    \n    @Column(columnDefinition = \"TEXT\")\n    private String correctAnswer;\n    \n    @Column(columnDefinition = \"TEXT\")\n    private String explanation;\n    \n    @Enumerated(EnumType.STRING)\n    private Difficulty difficulty;\n    \n    @ElementCollection\n    @CollectionTable(name = \"question_tags\", joinColumns = @JoinColumn(name = \"question_id\"))\n    @Column(name = \"tag\")\n    private List<String> tags;\n    \n    @ManyToOne(fetch = FetchType.LAZY)\n    @JoinColumn(name = \"user_id\", nullable = false)\n    private User user;\n    \n    @ManyToOne(fetch = FetchType.LAZY)\n    @JoinColumn(name = \"quiz_id\")\n    private Quiz quiz;\n    \n    @OneToMany(mappedBy = \"question\", cascade = CascadeType.ALL, fetch = FetchType.LAZY)\n    private List<QuestionOption> options;\n    \n    @Column(name = \"created_at\")\n    private LocalDateTime createdAt;\n    \n    @Column(name = \"updated_at\")\n    private LocalDateTime updatedAt;\n    \n    \n    public enum QuestionType {\n        MULTIPLE_CHOICE(\"multiple_choice\"),\n        PRONUNCIATION(\"pronunciation\"),\n        FILL_IN_THE_BLANK(\"fill_in_the_blank\");\n        \n        private final String value;\n        \n        QuestionType(String value) {\n            this.value = value;\n        }\n        \n        public String getValue() {\n            return value;\n        }\n        \n        public static QuestionType fromValue(String value) {\n            for (QuestionType type : QuestionType.values()) {\n                if (type.value.equals(value)) {\n                    return type;\n                }\n            }\n            throw new IllegalArgumentException(\"Invalid question type: \" + value);\n        }\n    }\n    \n    public enum Difficulty {\n        EASY(\"easy\"),\n        MEDIUM(\"medium\"),\n        HARD(\"hard\");\n        \n        private final String value;\n        \n        Difficulty(String value) {\n            this.value = value;\n        }\n        \n        public String getValue() {\n            return value;\n        }\n        \n        public static Difficulty fromValue(String value) {\n            if (value == null) return null;\n            for (Difficulty difficulty : Difficulty.values()) {\n                if (difficulty.value.equals(value)) {\n                    return difficulty;\n                }\n            }\n            throw new IllegalArgumentException(\"Invalid difficulty: \" + value);\n        }\n    }\n    \n    \n    public Question(String questionText, QuestionType questionType, User user) {\n        this.questionText = questionText;\n        this.questionType = questionType;\n        this.user = user;\n        this.createdAt = LocalDateTime.now();\n        this.updatedAt = LocalDateTime.now();\n    }\n    \n    @PrePersist\n    public void prePersist() {\n        if (this.createdAt == null) {\n            this.createdAt = LocalDateTime.now();\n        }\n        if (this.updatedAt == null) {\n            this.updatedAt = LocalDateTime.now();\n        }\n    }\n    \n    @PreUpdate\n    public void preUpdate() {\n        this.updatedAt = LocalDateTime.now();\n    }\n}",
    "ast_hash": "4ecc67e3ab87fe7e97e297f326d61139",
    "implements": [],
    "methods": [
      {
        "name": "com.example.demo.entity.Question.prePersist()",
        "body": "@PrePersist\n    public void prePersist() {\n        if (this.createdAt == null) {\n            this.createdAt = LocalDateTime.now();\n        }\n        if (this.updatedAt == null) {\n            this.updatedAt = LocalDateTime.now();\n        }\n    }",
        "ast_hash": "fe5792f4249a593ef5260d0d827c7b65",
        "method_calls": [],
        "used_types": [],
        "field_access": [
          "LocalDateTime createdAt",
          "LocalDateTime updatedAt"
        ],
        "inheritance_info": [],
        "endpoint": [],
        "type": "regular",
        "project_id": "2",
        "branch": "main"
      },
      {
        "name": "com.example.demo.entity.Question.preUpdate()",
        "body": "@PreUpdate\n    public void preUpdate() {\n        this.updatedAt = LocalDateTime.now();\n    }",
        "ast_hash": "55fcbc673c08305e14d025b45948f18d",
        "method_calls": [],
        "used_types": [],
        "field_access": [
          "LocalDateTime updatedAt"
        ],
        "inheritance_info": [],
        "endpoint": [],
        "type": "regular",
        "project_id": "2",
        "branch": "main"
      }
    ],
    "parent_class": [
      null
    ],
    "project_id": "2",
    "branch": "main",
    "is_nested": false,
    "type": "regular"
  },
  {
    "package": "com.example.demo.entity",
    "class_name": "QuestionType",
    "full_class_name": "com.example.demo.entity.Question.QuestionType",
    "file_path": "f:\\01_projects\\axonion\\data\\demo-java\\src\\main\\java\\com\\example\\demo\\entity\\Question.java",
    "content": "public enum QuestionType {\n        MULTIPLE_CHOICE(\"multiple_choice\"),\n        PRONUNCIATION(\"pronunciation\"),\n        FILL_IN_THE_BLANK(\"fill_in_the_blank\");\n        \n        private final String value;\n        \n        QuestionType(String value) {\n            this.value = value;\n        }\n        \n        public String getValue() {\n            return value;\n        }\n        \n        public static QuestionType fromValue(String value) {\n            for (QuestionType type : QuestionType.values()) {\n                if (type.value.equals(value)) {\n                    return type;\n                }\n            }\n            throw new IllegalArgumentException(\"Invalid question type: \" + value);\n        }\n    }",
    "ast_hash": "985b74f501b6633e3d328bacaebfe8c4",
    "implements": [],
    "methods": [],
    "parent_class": [
      "com.example.demo.entity.Question"
    ],
    "project_id": "2",
    "branch": "main",
    "is_nested": true,
    "type": "regular"
  },
  {
    "package": "com.example.demo.entity",
    "class_name": "Difficulty",
    "full_class_name": "com.example.demo.entity.Question.Difficulty",
    "file_path": "f:\\01_projects\\axonion\\data\\demo-java\\src\\main\\java\\com\\example\\demo\\entity\\Question.java",
    "content": "public enum Difficulty {\n        EASY(\"easy\"),\n        MEDIUM(\"medium\"),\n        HARD(\"hard\");\n        \n        private final String value;\n        \n        Difficulty(String value) {\n            this.value = value;\n        }\n        \n        public String getValue() {\n            return value;\n        }\n        \n        public static Difficulty fromValue(String value) {\n            if (value == null) return null;\n            for (Difficulty difficulty : Difficulty.values()) {\n                if (difficulty.value.equals(value)) {\n                    return difficulty;\n                }\n            }\n            throw new IllegalArgumentException(\"Invalid difficulty: \" + value);\n        }\n    }",
    "ast_hash": "cb71820af6a5a31fe0240463cc7982f0",
    "implements": [],
    "methods": [],
    "parent_class": [
      "com.example.demo.entity.Question"
    ],
    "project_id": "2",
    "branch": "main",
    "is_nested": true,
    "type": "regular"
  },
  {
    "package": "com.example.demo.entity",
    "class_name": "QuestionOption",
    "full_class_name": "com.example.demo.entity.QuestionOption",
    "file_path": "f:\\01_projects\\axonion\\data\\demo-java\\src\\main\\java\\com\\example\\demo\\entity\\QuestionOption.java",
    "content": "@Entity\n@Table(name = \"question_options\")\n@Data\n@NoArgsConstructor\n@AllArgsConstructor\npublic class QuestionOption {\n    \n    @Id\n    @GeneratedValue(strategy = GenerationType.IDENTITY)\n    private Long id;\n    \n    @Column(nullable = false, columnDefinition = \"TEXT\")\n    private String optionText;\n    \n    @Column(nullable = false)\n    private Boolean isCorrect;\n    \n    @ManyToOne(fetch = FetchType.LAZY)\n    @JoinColumn(name = \"question_id\", nullable = false)\n    private Question question;\n    \n    \n    public QuestionOption(String optionText, Boolean isCorrect, Question question) {\n        this.optionText = optionText;\n        this.isCorrect = isCorrect;\n        this.question = question;\n    }\n}",
    "ast_hash": "9d6a9e9ed5fbdc13d010f3cb1c504f0b",
    "implements": [],
    "methods": [],
    "parent_class": [
      null
    ],
    "project_id": "2",
    "branch": "main",
    "is_nested": false,
    "type": "regular"
  },
  {
    "package": "com.example.demo.entity",
    "class_name": "Quiz",
    "full_class_name": "com.example.demo.entity.Quiz",
    "file_path": "f:\\01_projects\\axonion\\data\\demo-java\\src\\main\\java\\com\\example\\demo\\entity\\Quiz.java",
    "content": "@Entity\n@Table(name = \"quizzes\")\n@Data\n@NoArgsConstructor\n@AllArgsConstructor\npublic class Quiz {\n    \n    @Id\n    @GeneratedValue(strategy = GenerationType.IDENTITY)\n    private Long id;\n    \n    @Column(nullable = false)\n    private String title;\n    \n    @Column(columnDefinition = \"TEXT\")\n    private String description;\n    \n    @ManyToOne(fetch = FetchType.LAZY)\n    @JoinColumn(name = \"user_id\", nullable = false)\n    private User user;\n    \n    @OneToMany(mappedBy = \"quiz\", cascade = CascadeType.ALL, fetch = FetchType.LAZY)\n    private List<Question> questions;\n    \n    @Column(name = \"created_at\")\n    private LocalDateTime createdAt;\n    \n    @Column(name = \"updated_at\")\n    private LocalDateTime updatedAt;\n    \n    \n    public Quiz(String title, String description, User user) {\n        this.title = title;\n        this.description = description;\n        this.user = user;\n        this.createdAt = LocalDateTime.now();\n        this.updatedAt = LocalDateTime.now();\n    }\n    \n    @PrePersist\n    public void prePersist() {\n        if (this.createdAt == null) {\n            this.createdAt = LocalDateTime.now();\n        }\n        if (this.updatedAt == null) {\n            this.updatedAt = LocalDateTime.now();\n        }\n    }\n    \n    @PreUpdate\n    public void preUpdate() {\n        this.updatedAt = LocalDateTime.now();\n    }\n}",
    "ast_hash": "9cdded91aec95fa185ebce1dd2e095f0",
    "implements": [],
    "methods": [
      {
        "name": "com.example.demo.entity.Quiz.prePersist()",
        "body": "@PrePersist\n    public void prePersist() {\n        if (this.createdAt == null) {\n            this.createdAt = LocalDateTime.now();\n        }\n        if (this.updatedAt == null) {\n            this.updatedAt = LocalDateTime.now();\n        }\n    }",
        "ast_hash": "fe5792f4249a593ef5260d0d827c7b65",
        "method_calls": [],
        "used_types": [],
        "field_access": [
          "LocalDateTime createdAt",
          "LocalDateTime updatedAt"
        ],
        "inheritance_info": [],
        "endpoint": [],
        "type": "regular",
        "project_id": "2",
        "branch": "main"
      },
      {
        "name": "com.example.demo.entity.Quiz.preUpdate()",
        "body": "@PreUpdate\n    public void preUpdate() {\n        this.updatedAt = LocalDateTime.now();\n    }",
        "ast_hash": "55fcbc673c08305e14d025b45948f18d",
        "method_calls": [],
        "used_types": [],
        "field_access": [
          "LocalDateTime updatedAt"
        ],
        "inheritance_info": [],
        "endpoint": [],
        "type": "regular",
        "project_id": "2",
        "branch": "main"
      }
    ],
    "parent_class": [
      null
    ],
    "project_id": "2",
    "branch": "main",
    "is_nested": false,
    "type": "regular"
  },
  {
    "package": "com.example.demo.entity",
    "class_name": "User",
    "full_class_name": "com.example.demo.entity.User",
    "file_path": "f:\\01_projects\\axonion\\data\\demo-java\\src\\main\\java\\com\\example\\demo\\entity\\User.java",
    "content": "@Entity\n@Table(name = \"users\")\n@Data\n@NoArgsConstructor\n@AllArgsConstructor\npublic class User {\n    \n    @Id\n    @GeneratedValue(strategy = GenerationType.IDENTITY)\n    private Long id;\n    \n    @Column(nullable = false, unique = true)\n    private String username;\n    \n    @Column(nullable = false, unique = true)\n    private String email;\n    \n    @Column(nullable = false)\n    private String password;\n    \n    @Column(name = \"created_at\")\n    private LocalDateTime createdAt;\n    \n    @OneToMany(mappedBy = \"user\", cascade = CascadeType.ALL, fetch = FetchType.LAZY)\n    private List<Quiz> quizzes;\n    \n    @OneToMany(mappedBy = \"user\", cascade = CascadeType.ALL, fetch = FetchType.LAZY)\n    private List<Question> questions;\n    \n    \n    public User(String username, String email, String password) {\n        this.username = username;\n        this.email = email;\n        this.password = password;\n        this.createdAt = LocalDateTime.now();\n    }\n    \n    @PrePersist\n    public void prePersist() {\n        if (this.createdAt == null) {\n            this.createdAt = LocalDateTime.now();\n        }\n    }\n}",
    "ast_hash": "1251a07aab7d41553914d9b4d3f987bd",
    "implements": [],
    "methods": [
      {
        "name": "com.example.demo.entity.User.prePersist()",
        "body": "@PrePersist\n    public void prePersist() {\n        if (this.createdAt == null) {\n            this.createdAt = LocalDateTime.now();\n        }\n    }",
        "ast_hash": "18842c062b6d9a1cd2afea17f2e6b153",
        "method_calls": [],
        "used_types": [],
        "field_access": [
          "LocalDateTime createdAt"
        ],
        "inheritance_info": [],
        "endpoint": [],
        "type": "regular",
        "project_id": "2",
        "branch": "main"
      }
    ],
    "parent_class": [
      null
    ],
    "project_id": "2",
    "branch": "main",
    "is_nested": false,
    "type": "regular"
  },
  {
    "package": "com.example.demo.repository",
    "class_name": "QuestionOptionRepository",
    "full_class_name": "com.example.demo.repository.QuestionOptionRepository",
    "file_path": "f:\\01_projects\\axonion\\data\\demo-java\\src\\main\\java\\com\\example\\demo\\repository\\QuestionOptionRepository.java",
    "content": "@Repository\npublic interface QuestionOptionRepository extends JpaRepository<QuestionOption, Long> {\n    \n    List<QuestionOption> findByQuestion(Question question);\n    \n    List<QuestionOption> findByQuestionId(Long questionId);\n    \n    List<QuestionOption> findByQuestionAndIsCorrect(Question question, Boolean isCorrect);\n}",
    "ast_hash": "9f3f7092a121432372ea413c573bacc2",
    "implements": [],
    "methods": [
      {
        "name": "com.example.demo.repository.QuestionOptionRepository.findByQuestion(Question question)",
        "body": "",
        "ast_hash": "a9c449d4fa44e9e5a41c574ae55ce4d9",
        "method_calls": [],
        "used_types": [
          "com.example.demo.entity.Question",
          "com.example.demo.entity.QuestionOption"
        ],
        "field_access": [],
        "inheritance_info": [],
        "endpoint": [],
        "type": "regular",
        "project_id": "2",
        "branch": "main"
      },
      {
        "name": "com.example.demo.repository.QuestionOptionRepository.findByQuestionId(Long questionId)",
        "body": "",
        "ast_hash": "a9c449d4fa44e9e5a41c574ae55ce4d9",
        "method_calls": [],
        "used_types": [
          "com.example.demo.entity.QuestionOption"
        ],
        "field_access": [],
        "inheritance_info": [],
        "endpoint": [],
        "type": "regular",
        "project_id": "2",
        "branch": "main"
      },
      {
        "name": "com.example.demo.repository.QuestionOptionRepository.findByQuestionAndIsCorrect(Question question, Boolean isCorrect)",
        "body": "",
        "ast_hash": "a9c449d4fa44e9e5a41c574ae55ce4d9",
        "method_calls": [],
        "used_types": [
          "com.example.demo.entity.Question",
          "com.example.demo.entity.QuestionOption"
        ],
        "field_access": [],
        "inheritance_info": [],
        "endpoint": [],
        "type": "regular",
        "project_id": "2",
        "branch": "main"
      }
    ],
    "parent_class": [
      null
    ],
    "project_id": "2",
    "branch": "main",
    "is_nested": false,
    "type": "regular"
  },
  {
    "package": "com.example.demo.repository",
    "class_name": "QuestionRepository",
    "full_class_name": "com.example.demo.repository.QuestionRepository",
    "file_path": "f:\\01_projects\\axonion\\data\\demo-java\\src\\main\\java\\com\\example\\demo\\repository\\QuestionRepository.java",
    "content": "@Repository\npublic interface QuestionRepository extends JpaRepository<Question, Long> {\n    \n    List<Question> findByUser(User user);\n    \n    List<Question> findByUserId(Long userId);\n    \n    List<Question> findByQuiz(Quiz quiz);\n    \n    List<Question> findByQuizId(Long quizId);\n    \n    Optional<Question> findByIdAndUser(Long id, User user);\n    \n    @Query(\"SELECT q FROM Question q WHERE q.user.id = :userId AND (:tag IS NULL OR :tag MEMBER OF q.tags)\")\n    List<Question> findByUserIdAndTag(@Param(\"userId\") Long userId, @Param(\"tag\") String tag);\n    \n    @Query(\"SELECT q FROM Question q WHERE q.user.id = :userId AND q.difficulty = :difficulty\")\n    List<Question> findByUserIdAndDifficulty(@Param(\"userId\") Long userId, @Param(\"difficulty\") Question.Difficulty difficulty);\n}",
    "ast_hash": "542617ec19b47c5da031f984fca6a03a",
    "implements": [],
    "methods": [
      {
        "name": "com.example.demo.repository.QuestionRepository.findByUser(User user)",
        "body": "",
        "ast_hash": "a9c449d4fa44e9e5a41c574ae55ce4d9",
        "method_calls": [],
        "used_types": [
          "com.example.demo.entity.Question",
          "com.example.demo.entity.User"
        ],
        "field_access": [],
        "inheritance_info": [],
        "endpoint": [],
        "type": "regular",
        "project_id": "2",
        "branch": "main"
      },
      {
        "name": "com.example.demo.repository.QuestionRepository.findByUserId(Long userId)",
        "body": "",
        "ast_hash": "a9c449d4fa44e9e5a41c574ae55ce4d9",
        "method_calls": [],
        "used_types": [
          "com.example.demo.entity.Question"
        ],
        "field_access": [],
        "inheritance_info": [],
        "endpoint": [],
        "type": "regular",
        "project_id": "2",
        "branch": "main"
      },
      {
        "name": "com.example.demo.repository.QuestionRepository.findByQuiz(Quiz quiz)",
        "body": "",
        "ast_hash": "a9c449d4fa44e9e5a41c574ae55ce4d9",
        "method_calls": [],
        "used_types": [
          "com.example.demo.entity.Question",
          "com.example.demo.entity.Quiz"
        ],
        "field_access": [],
        "inheritance_info": [],
        "endpoint": [],
        "type": "regular",
        "project_id": "2",
        "branch": "main"
      },
      {
        "name": "com.example.demo.repository.QuestionRepository.findByQuizId(Long quizId)",
        "body": "",
        "ast_hash": "a9c449d4fa44e9e5a41c574ae55ce4d9",
        "method_calls": [],
        "used_types": [
          "com.example.demo.entity.Question"
        ],
        "field_access": [],
        "inheritance_info": [],
        "endpoint": [],
        "type": "regular",
        "project_id": "2",
        "branch": "main"
      },
      {
        "name": "com.example.demo.repository.QuestionRepository.findByIdAndUser(Long id, User user)",
        "body": "",
        "ast_hash": "a9c449d4fa44e9e5a41c574ae55ce4d9",
        "method_calls": [],
        "used_types": [
          "com.example.demo.entity.Question",
          "com.example.demo.entity.User"
        ],
        "field_access": [],
        "inheritance_info": [],
        "endpoint": [],
        "type": "regular",
        "project_id": "2",
        "branch": "main"
      },
      {
        "name": "com.example.demo.repository.QuestionRepository.findByUserIdAndTag(@Param(\"userId\") Long userId, @Param(\"tag\") String tag)",
        "body": "",
        "ast_hash": "a9c449d4fa44e9e5a41c574ae55ce4d9",
        "method_calls": [],
        "used_types": [
          "com.example.demo.entity.Question"
        ],
        "field_access": [],
        "inheritance_info": [],
        "endpoint": [],
        "type": "regular",
        "project_id": "2",
        "branch": "main"
      },
      {
        "name": "com.example.demo.repository.QuestionRepository.findByUserIdAndDifficulty(@Param(\"userId\") Long userId, @Param(\"difficulty\") Question.Difficulty difficulty)",
        "body": "",
        "ast_hash": "a9c449d4fa44e9e5a41c574ae55ce4d9",
        "method_calls": [],
        "used_types": [
          "com.example.demo.entity.Question",
          "com.example.demo.entity.Question.Difficulty"
        ],
        "field_access": [],
        "inheritance_info": [],
        "endpoint": [],
        "type": "regular",
        "project_id": "2",
        "branch": "main"
      }
    ],
    "parent_class": [
      null
    ],
    "project_id": "2",
    "branch": "main",
    "is_nested": false,
    "type": "regular"
  },
  {
    "package": "com.example.demo.repository",
    "class_name": "QuizRepository",
    "full_class_name": "com.example.demo.repository.QuizRepository",
    "file_path": "f:\\01_projects\\axonion\\data\\demo-java\\src\\main\\java\\com\\example\\demo\\repository\\QuizRepository.java",
    "content": "@Repository\npublic interface QuizRepository extends JpaRepository<Quiz, Long> {\n    \n    List<Quiz> findByUser(User user);\n    \n    List<Quiz> findByUserId(Long userId);\n    \n    Optional<Quiz> findByIdAndUser(Long id, User user);\n}",
    "ast_hash": "9f3f7092a121432372ea413c573bacc2",
    "implements": [],
    "methods": [
      {
        "name": "com.example.demo.repository.QuizRepository.findByUser(User user)",
        "body": "",
        "ast_hash": "a9c449d4fa44e9e5a41c574ae55ce4d9",
        "method_calls": [],
        "used_types": [
          "com.example.demo.entity.Quiz",
          "com.example.demo.entity.User"
        ],
        "field_access": [],
        "inheritance_info": [],
        "endpoint": [],
        "type": "regular",
        "project_id": "2",
        "branch": "main"
      },
      {
        "name": "com.example.demo.repository.QuizRepository.findByUserId(Long userId)",
        "body": "",
        "ast_hash": "a9c449d4fa44e9e5a41c574ae55ce4d9",
        "method_calls": [],
        "used_types": [
          "com.example.demo.entity.Quiz"
        ],
        "field_access": [],
        "inheritance_info": [],
        "endpoint": [],
        "type": "regular",
        "project_id": "2",
        "branch": "main"
      },
      {
        "name": "com.example.demo.repository.QuizRepository.findByIdAndUser(Long id, User user)",
        "body": "",
        "ast_hash": "a9c449d4fa44e9e5a41c574ae55ce4d9",
        "method_calls": [],
        "used_types": [
          "com.example.demo.entity.Quiz",
          "com.example.demo.entity.User"
        ],
        "field_access": [],
        "inheritance_info": [],
        "endpoint": [],
        "type": "regular",
        "project_id": "2",
        "branch": "main"
      }
    ],
    "parent_class": [
      null
    ],
    "project_id": "2",
    "branch": "main",
    "is_nested": false,
    "type": "regular"
  },
  {
    "package": "com.example.demo.repository",
    "class_name": "UserRepository",
    "full_class_name": "com.example.demo.repository.UserRepository",
    "file_path": "f:\\01_projects\\axonion\\data\\demo-java\\src\\main\\java\\com\\example\\demo\\repository\\UserRepository.java",
    "content": "@Repository\npublic interface UserRepository extends JpaRepository<User, Long> {\n    \n    Optional<User> findByUsername(String username);\n    \n    Optional<User> findByEmail(String email);\n    \n    boolean existsByUsername(String username);\n    \n    boolean existsByEmail(String email);\n}",
    "ast_hash": "8eb2f7a534a5b5d27618cb8460a79055",
    "implements": [],
    "methods": [
      {
        "name": "com.example.demo.repository.UserRepository.findByUsername(String username)",
        "body": "",
        "ast_hash": "a9c449d4fa44e9e5a41c574ae55ce4d9",
        "method_calls": [],
        "used_types": [
          "com.example.demo.entity.User"
        ],
        "field_access": [],
        "inheritance_info": [],
        "endpoint": [],
        "type": "regular",
        "project_id": "2",
        "branch": "main"
      },
      {
        "name": "com.example.demo.repository.UserRepository.findByEmail(String email)",
        "body": "",
        "ast_hash": "a9c449d4fa44e9e5a41c574ae55ce4d9",
        "method_calls": [],
        "used_types": [
          "com.example.demo.entity.User"
        ],
        "field_access": [],
        "inheritance_info": [],
        "endpoint": [],
        "type": "regular",
        "project_id": "2",
        "branch": "main"
      },
      {
        "name": "com.example.demo.repository.UserRepository.existsByUsername(String username)",
        "body": "",
        "ast_hash": "a9c449d4fa44e9e5a41c574ae55ce4d9",
        "method_calls": [],
        "used_types": [],
        "field_access": [],
        "inheritance_info": [],
        "endpoint": [],
        "type": "regular",
        "project_id": "2",
        "branch": "main"
      },
      {
        "name": "com.example.demo.repository.UserRepository.existsByEmail(String email)",
        "body": "",
        "ast_hash": "a9c449d4fa44e9e5a41c574ae55ce4d9",
        "method_calls": [],
        "used_types": [],
        "field_access": [],
        "inheritance_info": [],
        "endpoint": [],
        "type": "regular",
        "project_id": "2",
        "branch": "main"
      }
    ],
    "parent_class": [
      null
    ],
    "project_id": "2",
    "branch": "main",
    "is_nested": false,
    "type": "regular"
  },
  {
    "package": "com.example.demo.service",
    "class_name": "QuestionService",
    "full_class_name": "com.example.demo.service.QuestionService",
    "file_path": "f:\\01_projects\\axonion\\data\\demo-java\\src\\main\\java\\com\\example\\demo\\service\\QuestionService.java",
    "content": "@Service\n@Transactional\npublic class QuestionService {\n    \n    @Autowired\n    private QuestionRepository questionRepository;\n    \n    @Autowired\n    private UserRepository userRepository;\n    \n    @Autowired\n    private QuizRepository quizRepository;\n    \n    public QuestionResponse createQuestion(CreateQuestionRequest request, Long userId) {\n        \n        User user = userRepository.findById(userId)\n            .orElseThrow(() -> new RuntimeException(\"User not found\"));\n        \n        \n        Quiz quiz = null;\n        if (request.getQuizId() != null) {\n            quiz = quizRepository.findByIdAndUser(request.getQuizId(), user)\n                .orElseThrow(() -> new RuntimeException(\"Quiz not found or access denied\"));\n        }\n        \n        \n        Question.QuestionType questionType = Question.QuestionType.fromValue(request.getQuestionType());\n        validateQuestionData(request, questionType);\n        \n        \n        Question question = new Question();\n        question.setQuestionText(request.getQuestionText());\n        question.setQuestionType(questionType);\n        question.setCorrectAnswer(request.getCorrectAnswer());\n        question.setExplanation(request.getExplanation());\n        question.setTags(request.getTags());\n        question.setUser(user);\n        question.setQuiz(quiz);\n        \n        if (request.getDifficulty() != null) {\n            question.setDifficulty(Question.Difficulty.fromValue(request.getDifficulty()));\n        }\n        \n        \n        question = questionRepository.save(question);\n        \n        \n        List<QuestionOption> options = new ArrayList<>();\n        if (request.getOptions() != null && !request.getOptions().isEmpty()) {\n            for (QuestionOptionDto optionDto : request.getOptions()) {\n                QuestionOption option = new QuestionOption();\n                option.setOptionText(optionDto.getOptionText());\n                option.setIsCorrect(optionDto.getIsCorrect());\n                option.setQuestion(question);\n                options.add(option);\n            }\n            question.setOptions(options);\n        }\n        \n        \n        question = questionRepository.save(question);\n        \n        return mapToResponse(question);\n    }\n    \n    public List<QuestionResponse> getUserQuestions(Long userId) {\n        User user = userRepository.findById(userId)\n            .orElseThrow(() -> new RuntimeException(\"User not found\"));\n        \n        List<Question> questions = questionRepository.findByUser(user);\n        return questions.stream()\n            .map(this::mapToResponse)\n            .collect(Collectors.toList());\n    }\n    \n    public QuestionResponse getQuestionById(Long questionId, Long userId) {\n        User user = userRepository.findById(userId)\n            .orElseThrow(() -> new RuntimeException(\"User not found\"));\n        \n        Question question = questionRepository.findByIdAndUser(questionId, user)\n            .orElseThrow(() -> new RuntimeException(\"Question not found or access denied\"));\n        \n        return mapToResponse(question);\n    }\n    \n    private void validateQuestionData(CreateQuestionRequest request, Question.QuestionType questionType) {\n        switch (questionType) {\n            case MULTIPLE_CHOICE:\n                if (request.getOptions() == null || request.getOptions().isEmpty()) {\n                    throw new IllegalArgumentException(\"Multiple choice questions must have options\");\n                }\n                \n                long correctCount = request.getOptions().stream()\n                    .mapToLong(option -> option.getIsCorrect() ? 1 : 0)\n                    .sum();\n                \n                if (correctCount == 0) {\n                    throw new IllegalArgumentException(\"Multiple choice questions must have at least one correct option\");\n                }\n                break;\n                \n            case PRONUNCIATION:\n            case FILL_IN_THE_BLANK:\n                if (request.getCorrectAnswer() == null || request.getCorrectAnswer().trim().isEmpty()) {\n                    throw new IllegalArgumentException(questionType.getValue() + \" questions must have a correct answer\");\n                }\n                break;\n        }\n    }\n    \n    private QuestionResponse mapToResponse(Question question) {\n        List<QuestionOptionDto> optionDtos = null;\n        if (question.getOptions() != null && !question.getOptions().isEmpty()) {\n            optionDtos = question.getOptions().stream()\n                .map(option -> new QuestionOptionDto(option.getOptionText(), option.getIsCorrect()))\n                .collect(Collectors.toList());\n        }\n        \n        return new QuestionResponse(\n            question.getId().toString(),\n            question.getQuestionText(),\n            question.getQuestionType().getValue(),\n            optionDtos,\n            question.getCorrectAnswer(),\n            question.getExplanation(),\n            question.getTags(),\n            question.getDifficulty() != null ? question.getDifficulty().getValue() : null,\n            question.getCreatedAt()\n        );\n    }\n}",
    "ast_hash": "7178dabd41d43b8512aaf6b4d8f1a639",
    "implements": [],
    "methods": [
      {
        "name": "com.example.demo.service.QuestionService.createQuestion(CreateQuestionRequest request, Long userId)",
        "body": "public QuestionResponse createQuestion(CreateQuestionRequest request, Long userId) {\n        \n        User user = userRepository.findById(userId)\n            .orElseThrow(() -> new RuntimeException(\"User not found\"));\n        \n        \n        Quiz quiz = null;\n        if (request.getQuizId() != null) {\n            quiz = quizRepository.findByIdAndUser(request.getQuizId(), user)\n                .orElseThrow(() -> new RuntimeException(\"Quiz not found or access denied\"));\n        }\n        \n        \n        Question.QuestionType questionType = Question.QuestionType.fromValue(request.getQuestionType());\n        validateQuestionData(request, questionType);\n        \n        \n        Question question = new Question();\n        question.setQuestionText(request.getQuestionText());\n        question.setQuestionType(questionType);\n        question.setCorrectAnswer(request.getCorrectAnswer());\n        question.setExplanation(request.getExplanation());\n        question.setTags(request.getTags());\n        question.setUser(user);\n        question.setQuiz(quiz);\n        \n        if (request.getDifficulty() != null) {\n            question.setDifficulty(Question.Difficulty.fromValue(request.getDifficulty()));\n        }\n        \n        \n        question = questionRepository.save(question);\n        \n        \n        List<QuestionOption> options = new ArrayList<>();\n        if (request.getOptions() != null && !request.getOptions().isEmpty()) {\n            for (QuestionOptionDto optionDto : request.getOptions()) {\n                QuestionOption option = new QuestionOption();\n                option.setOptionText(optionDto.getOptionText());\n                option.setIsCorrect(optionDto.getIsCorrect());\n                option.setQuestion(question);\n                options.add(option);\n            }\n            question.setOptions(options);\n        }\n        \n        \n        question = questionRepository.save(question);\n        \n        return mapToResponse(question);\n    }",
        "ast_hash": "5a2ff9eefeb8e8af6d746593e6373f5d",
        "method_calls": [
          {
            "name": "com.example.demo.repository.QuizRepository.findByIdAndUser(Long id, User user)",
            "params": []
          },
          {
            "name": "com.example.demo.service.QuestionService.validateQuestionData(CreateQuestionRequest request, Question.QuestionType questionType)",
            "params": []
          },
          {
            "name": "com.example.demo.service.QuestionService.mapToResponse(Question question)",
            "params": []
          }
        ],
        "used_types": [
          "com.example.demo.dto.CreateQuestionRequest",
          "com.example.demo.entity.Question.QuestionType",
          "com.example.demo.entity.QuestionOption",
          "com.example.demo.entity.Question",
          "com.example.demo.entity.Quiz",
          "com.example.demo.dto.QuestionResponse",
          "com.example.demo.entity.User"
        ],
        "field_access": [
          "com.example.demo.entity.Question.Difficulty",
          "com.example.demo.entity.Question.QuestionType"
        ],
        "inheritance_info": [],
        "endpoint": [],
        "type": "regular",
        "project_id": "2",
        "branch": "main"
      },
      {
        "name": "com.example.demo.service.QuestionService.getUserQuestions(Long userId)",
        "body": "public List<QuestionResponse> getUserQuestions(Long userId) {\n        User user = userRepository.findById(userId)\n            .orElseThrow(() -> new RuntimeException(\"User not found\"));\n        \n        List<Question> questions = questionRepository.findByUser(user);\n        return questions.stream()\n            .map(this::mapToResponse)\n            .collect(Collectors.toList());\n    }",
        "ast_hash": "9de778e932a8cb8f05b3afdf379460ac",
        "method_calls": [
          {
            "name": "com.example.demo.repository.QuestionRepository.findByUser(User user)",
            "params": []
          }
        ],
        "used_types": [
          "com.example.demo.entity.Question",
          "com.example.demo.dto.QuestionResponse",
          "com.example.demo.entity.User"
        ],
        "field_access": [],
        "inheritance_info": [],
        "endpoint": [],
        "type": "regular",
        "project_id": "2",
        "branch": "main"
      },
      {
        "name": "com.example.demo.service.QuestionService.getQuestionById(Long questionId, Long userId)",
        "body": "public QuestionResponse getQuestionById(Long questionId, Long userId) {\n        User user = userRepository.findById(userId)\n            .orElseThrow(() -> new RuntimeException(\"User not found\"));\n        \n        Question question = questionRepository.findByIdAndUser(questionId, user)\n            .orElseThrow(() -> new RuntimeException(\"Question not found or access denied\"));\n        \n        return mapToResponse(question);\n    }",
        "ast_hash": "81344bdb80cb227eb7183c30abc3f8de",
        "method_calls": [
          {
            "name": "com.example.demo.service.QuestionService.mapToResponse(Question question)",
            "params": []
          },
          {
            "name": "com.example.demo.repository.QuestionRepository.findByIdAndUser(Long id, User user)",
            "params": []
          }
        ],
        "used_types": [
          "com.example.demo.entity.Question",
          "com.example.demo.dto.QuestionResponse",
          "com.example.demo.entity.User"
        ],
        "field_access": [],
        "inheritance_info": [],
        "endpoint": [],
        "type": "regular",
        "project_id": "2",
        "branch": "main"
      },
      {
        "name": "com.example.demo.service.QuestionService.validateQuestionData(CreateQuestionRequest request, Question.QuestionType questionType)",
        "body": "private void validateQuestionData(CreateQuestionRequest request, Question.QuestionType questionType) {\n        switch (questionType) {\n            case MULTIPLE_CHOICE:\n                if (request.getOptions() == null || request.getOptions().isEmpty()) {\n                    throw new IllegalArgumentException(\"Multiple choice questions must have options\");\n                }\n                \n                long correctCount = request.getOptions().stream()\n                    .mapToLong(option -> option.getIsCorrect() ? 1 : 0)\n                    .sum();\n                \n                if (correctCount == 0) {\n                    throw new IllegalArgumentException(\"Multiple choice questions must have at least one correct option\");\n                }\n                break;\n                \n            case PRONUNCIATION:\n            case FILL_IN_THE_BLANK:\n                if (request.getCorrectAnswer() == null || request.getCorrectAnswer().trim().isEmpty()) {\n                    throw new IllegalArgumentException(questionType.getValue() + \" questions must have a correct answer\");\n                }\n                break;\n        }\n    }",
        "ast_hash": "8c6d5a588d5856901c6884fbf83f9440",
        "method_calls": [],
        "used_types": [
          "com.example.demo.dto.CreateQuestionRequest",
          "com.example.demo.entity.Question.QuestionType"
        ],
        "field_access": [],
        "inheritance_info": [],
        "endpoint": [],
        "type": "regular",
        "project_id": "2",
        "branch": "main"
      },
      {
        "name": "com.example.demo.service.QuestionService.mapToResponse(Question question)",
        "body": "private QuestionResponse mapToResponse(Question question) {\n        List<QuestionOptionDto> optionDtos = null;\n        if (question.getOptions() != null && !question.getOptions().isEmpty()) {\n            optionDtos = question.getOptions().stream()\n                .map(option -> new QuestionOptionDto(option.getOptionText(), option.getIsCorrect()))\n                .collect(Collectors.toList());\n        }\n        \n        return new QuestionResponse(\n            question.getId().toString(),\n            question.getQuestionText(),\n            question.getQuestionType().getValue(),\n            optionDtos,\n            question.getCorrectAnswer(),\n            question.getExplanation(),\n            question.getTags(),\n            question.getDifficulty() != null ? question.getDifficulty().getValue() : null,\n            question.getCreatedAt()\n        );\n    }",
        "ast_hash": "2e4a1af4b51546e9fa92cbb7f3501793",
        "method_calls": [],
        "used_types": [
          "com.example.demo.entity.Question",
          "com.example.demo.dto.QuestionResponse",
          "com.example.demo.dto.QuestionOptionDto"
        ],
        "field_access": [],
        "inheritance_info": [],
        "endpoint": [],
        "type": "regular",
        "project_id": "2",
        "branch": "main"
      }
    ],
    "parent_class": [
      null
    ],
    "project_id": "2",
    "branch": "main",
    "is_nested": false,
    "type": "regular"
  },
  {
    "package": "com.example.demo",
    "class_name": "Demo1ApplicationTests",
    "full_class_name": "com.example.demo.Demo1ApplicationTests",
    "file_path": "f:\\01_projects\\axonion\\data\\demo-java\\src\\test\\java\\com\\example\\demo\\Demo1ApplicationTests.java",
    "content": "@SpringBootTest\nclass Demo1ApplicationTests {\n\n    @Test\n    void contextLoads() {\n    }\n\n}",
    "ast_hash": "51f91247f5c809d2e520b60ee4bc37b3",
    "implements": [],
    "methods": [
      {
        "name": "com.example.demo.Demo1ApplicationTests.contextLoads()",
        "body": "@Test\n    void contextLoads() {\n    }",
        "ast_hash": "73ccd8775aee3f5c2d092289171b6628",
        "method_calls": [],
        "used_types": [],
        "field_access": [],
        "inheritance_info": [],
        "endpoint": [],
        "type": "regular",
        "project_id": "2",
        "branch": "main"
      }
    ],
    "parent_class": [
      null
    ],
    "project_id": "2",
    "branch": "main",
    "is_nested": false,
    "type": "regular"
  }
]